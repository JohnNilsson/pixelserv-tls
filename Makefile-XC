# basic setup

DISTNAME  := pixelserv-tls
CC        := gcc
OPTS      := -DDROP_ROOT -DIF_MODE
SRCS      := util.c socket_handler.c pixelserv.c certs.c logger.c

ROOT      := .
CFLAGS    := -I$(ROOT)/openssl/include
LDFLAGS    = -L$(ROOT)/openssl/$(ARCH) -L$(ROOT)/openssl/$(ARCH)
SHAREDLIB := -lssl -lcrypto -ldl -lpthread
STATICLIB  = $(ROOT)/openssl/$(ARCH)/libssl.a $(ROOT)/openssl/$(ARCH)/libcrypto.a

# debug flags
CFLAGS_D   = $(CFLAGS) -g -Wall -DDEBUG -DTEST
LDFLAGS_D  = $(LDFLAGS)

# performance flags
ifndef BACKTRACE
CFLAGS_P   = $(CFLAGS) -O3 -s -Wall -ffunction-sections -fdata-sections -fno-strict-aliasing
LDFLAGS_P  = $(LDFLAGS) -Wl,--gc-sections
else
CFLAGS_P   = $(CFLAGS) -O3 -s -Wall -g -funwind-tables -rdynamic -DBACKTRACE
LDFLAGS_P  = $(LDFLAGS)
endif

# aggressive strip command
# note that this breaks the x86 build on x86-64 for some reason
STRIP     := strip -s -R .note -R .comment -R .gnu.version -R .gnu.version_r

# agressive UPX compress
UPX       := upx -9

# packaging macros
PFILES     = LICENSE README.md dist/$(DISTNAME).$(ARCH).performance.*
PVERSION  := $(shell grep VERSION util.h | awk -F ' ' '{print $$NF}' | sed 's/"//g')
PCMD      := zip

# x86 environment
CC32      := $(CC) -m32

# x86_64 environment
CC64      := $(CC) -m64

# MIPS environment
# I set my path ahead of time, so I've commented out the path command macro below
MIPSTOOLS := /opt/brcm/hndtools-mipsel-uclibc/bin:/opt/brcm/hndtools-mipsel-linux/bin
MIPSPATH  := PATH=$(MIPSTOOLS):$(PATH)
MIPSREFIX := mipsel-uclibc-
MIPSCC    := $(MIPSREFIX)$(CC)
MIPSSTRIP := $(MIPSREFIX)$(STRIP)

# ARM(Asuswrt) environment
ARMTOOLS  := /opt/brcm-arm/bin
ARMPATH   := PATH=$(ARMTOOLS):$(PATH)
ARMPREFIX := arm-brcm-linux-uclibcgnueabi-
ARMCC     := $(ARMPREFIX)$(CC)
ARMSTRIP  := $(ARMPREFIX)$(STRIP)

# ARMV8(Asuswrt) environment
ARMV8TOOLS  := /home/yipst/brcm-armv8/usr/bin
ARMV8PATH   := PATH=$(ARMV8TOOLS):$(PATH)
ARMV8PREFIX := arm-linux
ARMV8CC     := $(ARMV8PREFIX)$(CC)
ARMV8STRIP  := $(ARMV8PREFIX)$(STRIP)

# ARM(Entware) environment
ARMentTOOLS  := ../arm-unknown-linux-gnueabi/bin
ARMentPATH   := PATH=$(ARMentTOOLS):$(PATH)
ARMentPREFIX := arm-openwrt-linux-gnueabi-
ARMentCC     := $(ARMentPREFIX)$(CC)
ARMentSTRIP  := $(ARMentPREFIX)$(STRIP)

# mipsel(Entware) environment
MIPSentTOOLS  := /home/yipst/Entware-ng/staging_dir/toolchain-mipsel_mips32r2_gcc-5.4.0_uClibc-1.0.17/bin
MIPSentPATH   := PATH=$(MIPSentTOOLS):$(PATH)
MIPSentPREFIX := mipsel-openwrt-linux-uclibc-
MIPSentCC     := $(MIPSentPREFIX)$(CC)
MIPSentSTRIP  := $(MIPSentPREFIX)$(STRIP)

# tomatoware environment uses basic setup options because it compiles native

# targets - notes:
# - for each platform, there should be 4 versions: dynamic performance, dynamic debug, static performance, static debug
# - mips version could be K24 or K26 depending on environment
# - tomatoware is not included in the 'all' target, because it's for compiling natively on a router

.PHONY: all clean distclean printver x86 x86_x64 mips arm tomatoware

all: amd64 arm mips #x86
	@echo "=== Built all x86 and cross-compiler targets ==="

clean:
	@echo "=== Cleaning intermediate build products ==="
	rm -rf ./*.o

distclean: clean
	@echo "=== Cleaning deployment products ==="
	rm -rf ./dist

dist:
	@echo "=== Creating deployment directory ==="
	mkdir -p dist

printver:
	@echo "=== Building $(DISTNAME) version $(PVERSION) ==="

x86: ARCH = i386
x86: LDFLAGS += -lpthread
x86: printver dist
	@echo "=== Building x86 ==="
	$(CC32) $(CFLAGS_D) $(LDFLAGS_D) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.debug.dynamic $(SHAREDLIB)
	$(CC32) $(CFLAGS_P) $(LDFLAGS_P) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.performance.dynamic $(SHAREDLIB)
	$(CC32) $(CFLAGS_D) -static $(LDFLAGS_D) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.debug.static $(STATICLIB) $(SHAREDLIB)
	$(CC32) $(CFLAGS_P) -static $(LDFLAGS_P) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.performance.static $(STATICLIB) $(SHAREDLIB)
	$(STRIP) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).$@.zip $(PFILES)

amd64: ARCH = amd64
amd64: LDFLAGS += -lpthread
amd64: printver dist
	@echo "=== Building amd64 ==="
	$(CC64) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.dynamic $(OPTS) $(SRCS) $(LDFLAGS_D) $(SHAREDLIB)
	$(CC64) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.dynamic $(OPTS) $(SRCS) $(LDFLAGS_P) $(SHAREDLIB) 
#	$(CC64) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.static $(OPTS) $(SRCS) $(STATICLIB) -static $(LDFLAGS_D) $(SHAREDLIB)
	$(CC64) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.static \
	        $(OPTS) $(SRCS) $(STATICLIB) -static $(LDFLAGS_P) $(SHAREDLIB)
#	$(STRIP) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).$@.zip $(PFILES)

mips: ARCH = mips
mips: printver dist
	@echo "=== Building MIPS ==="
	$(MIPSPATH) $(MIPSCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.dynamic $(OPTS) $(SRCS) $(LDFLAGS_D) $(SHAREDLIB)
	$(MIPSPATH) $(MIPSCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.dynamic $(OPTS) $(SRCS) $(LDFLAGS_P) $(SHAREDLIB)
	$(MIPSPATH) $(MIPSCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.static \
	        $(OPTS) $(SRCS) $(STATICLIB) -static $(LDFLAGS_D) $(SHAREDLIB)
	$(MIPSPATH) $(MIPSCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.static \
	        $(OPTS) $(SRCS) $(STATICLIB) -static $(LDFLAGS_P) $(SHAREDLIB)
	$(MIPSPATH) $(MIPSSTRIP) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).$@.zip $(PFILES)

mips.ent: LDFLAGS += -Wl,-rpath=/opt/lib -Wl,--dynamic-linker=/opt/lib/ld-uClibc.so.0 -lpthread -L/home/yipst/Entware-ng/staging_dir/toolchain-mipsel_mips32r2_gcc-5.4.0_uClibc-1.0.17/lib
mips.ent: CFLAGS += -isystem/home/yipst/Entware-ng/staging_dir/toolchain-mipsel_mips32r2_gcc-5.4.0_uClibc-1.0.17/include
mips.ent: ARCH = mips.ent
mips.ent: export STAGING_DIR = /home/yipst/Entware-ng/staging_dir/target-mipsel_mips32r2_uClibc-1.0.17
mips.ent: printver dist
	@echo "=== Building mipsel Entware-ng  ==="
	$(MIPSentPATH) $(MIPSentCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.dynamic $(OPTS) $(SRCS) $(LDFLAGS_P) $(SHAREDLIB)
	$(MIPSentPATH) $(MIPSentSTRIP) dist/$(DISTNAME).$@.performance.*
	$(PCMD) dist/$(DISTNAME).$(PVERSION).Entware-ng.mipsel.zip $(PFILES)

arm: ARCH = arm
arm: printver dist
	@echo "=== Building ARM ==="
	$(ARMPATH) $(ARMCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.dynamic $(OPTS) $(SRCS) $(LDFLAGS_D) $(SHAREDLIB) 
	$(ARMPATH) $(ARMCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.dynamic $(OPTS) $(SRCS) $(LDFLAGS_P) $(SHAREDLIB)
	$(ARMPATH) $(ARMCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.static \
	        $(OPTS) $(SRCS) $(STATICLIB) $(SHAREDLIB) -static $(LDFLAGS_D) 
	$(ARMPATH) $(ARMCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.static \
	        $(OPTS) $(SRCS) $(STATICLIB) $(SHAREDLIB) -static $(LDFLAGS_P)
	$(ARMPATH) $(ARMSTRIP) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).$@.zip $(PFILES)

arm.ent: LDFLAGS += -Wl,-rpath=/opt/lib -Wl,--dynamic-linker=/opt/lib/ld-linux.so.3 -lpthread -L/home/yipst/Entware-ng/staging_dir/toolchain-arm_cortex-a9_gcc-6.3.0_glibc-2.23_eabi/lib
arm.ent: CFLAGS += -isystem/home/yipst/Entware-ng/staging_dir/toolchain-arm_cortex-a9_gcc-6.3.0_glibc-2.23_eabi/include
arm.ent: ARCH = arm.ent
arm.ent: printver dist
	@echo "=== Building ARM (Entware) ==="
	$(ARMentPATH) $(ARMentCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.dynamic $(OPTS) $(SRCS) $(LDFLAGS_D) $(SHAREDLIB) 
	$(ARMentPATH) $(ARMentCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.dynamic $(OPTS) $(SRCS) $(LDFLAGS_P) $(SHAREDLIB)
#	$(ARMentPATH) $(ARMentCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.static \
#	        $(OPTS) $(SRCS) $(STATICLIB) $(SHAREDLIB) -static $(LDFLAGS_D) 
#	$(ARMentPATH) $(ARMentCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.static \
#	        $(OPTS) $(SRCS) $(STATICLIB) $(SHAREDLIB) -static $(LDFLAGS_P)
#	$(ARMentPATH) $(ARMentSTRIP) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).Entware-ng.armv7softfloat.zip $(PFILES)

armv8: ARCH = arm.ent
armv8: printver dist
	@echo "=== Building ARM ==="
	$(ARMPATH) $(ARMCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.dynamic $(OPTS) $(SRCS) $(LDFLAGS_D) $(SHAREDLIB) 
	$(ARMPATH) $(ARMCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.dynamic $(OPTS) $(SRCS) $(LDFLAGS_P) $(SHAREDLIB)
#	$(ARMPATH) $(ARMCC) $(CFLAGS_D) -o dist/$(DISTNAME).$@.debug.static \
#	        $(OPTS) $(SRCS) $(STATICLIB) $(SHAREDLIB) -static $(LDFLAGS_D) 
#	$(ARMPATH) $(ARMCC) $(CFLAGS_P) -o dist/$(DISTNAME).$@.performance.static \
#	        $(OPTS) $(SRCS) $(STATICLIB) $(SHAREDLIB) -static $(LDFLAGS_P)
	$(ARMPATH) $(ARMSTRIP) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).$@.zip $(PFILES)

tomatoware: printver dist
	@echo "=== Building tomatoware ==="
	$(CC) $(CFLAGS_D) $(LDFLAGS_D) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.debug.dynamic
	$(CC) $(CFLAGS_P) $(LDFLAGS_P) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.performance.dynamic
	$(CC) $(CFLAGS_D) -static $(LDFLAGS_D) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.debug.static
	$(CC) $(CFLAGS_P) -static $(LDFLAGS_P) $(OPTS) $(SRCS) -o dist/$(DISTNAME).$@.performance.static
	$(STRIP) dist/$(DISTNAME).$@.performance.*
	$(UPX) dist/$(DISTNAME).$@.performance.*
	rm -f dist/$(DISTNAME).$(PVERSION).$@.zip
	$(PCMD) dist/$(DISTNAME).$(PVERSION).$@.zip $(PFILES)
